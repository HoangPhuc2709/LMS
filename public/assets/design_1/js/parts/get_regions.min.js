/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!****************************************************!*\
  !*** ./resources/js/design_1/parts/get_regions.js ***!
  \****************************************************/
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
(function () {
  "use strict";

  function getSelection($this, el) {
    var _$this$attr;
    var regionParent = (_$this$attr = $this.attr('data-regions-parent')) !== null && _$this$attr !== void 0 ? _$this$attr : '';
    if (regionParent) {
      return $this.closest('.' + regionParent).find(el);
    }
    return $(el);
  }
  function handleMapCenterAfterSelectChange($select, zoom) {
    var selectedOption = $select.find('option:checked');
    var mapCenter = selectedOption.attr('data-center');
    if (mapCenter) {
      var _$select$attr;
      mapCenter = mapCenter.split(',');
      var regionParent = (_$select$attr = $select.attr('data-regions-parent')) !== null && _$select$attr !== void 0 ? _$select$attr : '';
      if (regionParent) {
        var $regionParent = $select.closest('.' + regionParent);
        var mapId = $regionParent.find('.region-map').attr('id');
        if (mapId) {
          if (typeof windowMapContainers !== "undefined" && typeof windowMapContainers[mapId] !== "undefined" && mapCenter && mapCenter[0] && mapCenter[1]) {
            windowMapContainers[mapId].setView([mapCenter[0], mapCenter[1]], zoom);
          }
        }
      }
    }
  }
  $('body').on('change', '.js-country-selection', function () {
    var $this = $(this);
    var defaultVal = typeof selectRegionDefaultVal !== "undefined" ? selectRegionDefaultVal : null;
    var stateSelection = getSelection($this, '.js-state-selection');
    var citySelection = getSelection($this, '.js-city-selection');
    var districtSelection = getSelection($this, '.js-district-selection');
    stateSelection.val(defaultVal).prop('disabled', true);
    citySelection.val(defaultVal).prop('disabled', true);
    districtSelection.val(defaultVal).prop('disabled', true);
    $('.js-districts-field').addClass('d-none');
    if ($this.val() && $this.val() !== 'all') {
      var _$this$attr2;
      var mapZoom = (_$this$attr2 = $this.attr('data-map-zoom')) !== null && _$this$attr2 !== void 0 ? _$this$attr2 : 5;
      handleMapCenterAfterSelectChange($this, mapZoom);
      $this.addClass('loadingbar gray').prop('disabled', true);
      $.get('/regions/provincesByCountry/' + $this.val(), function (result) {
        if (result && result.code === 200) {
          var html = '<option value="' + defaultVal + '">' + selectStateLang + '</option>';
          if (result.provinces && result.provinces.length) {
            var _iterator = _createForOfIteratorHelper(result.provinces),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var state = _step.value;
                html += '<option value="' + state.id + '" data-center="' + state.geo_center.join(',') + '">' + state.title + '</option>';
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          stateSelection.prop('disabled', false);
          stateSelection.html(html);
          $this.removeClass('loadingbar gray').prop('disabled', false);
        }
      });
    }
  });
  $('body').on('change', '.js-state-selection', function () {
    var $this = $(this);
    var defaultVal = typeof selectRegionDefaultVal !== "undefined" ? selectRegionDefaultVal : null;
    var citySelection = getSelection($this, '.js-city-selection');
    var districtSelection = getSelection($this, '.js-district-selection');
    citySelection.val(defaultVal).prop('disabled', true);
    districtSelection.val(defaultVal).prop('disabled', true);
    $('.js-districts-field').addClass('d-none');
    if ($this.val() && $this.val() !== 'all') {
      var _$this$attr3;
      var mapZoom = (_$this$attr3 = $this.attr('data-map-zoom')) !== null && _$this$attr3 !== void 0 ? _$this$attr3 : 8;
      handleMapCenterAfterSelectChange($this, mapZoom);
      $this.addClass('loadingbar gray').prop('disabled', true);
      $.get('/regions/citiesByProvince/' + $this.val(), function (result) {
        if (result && result.code === 200) {
          var html = '<option value="' + defaultVal + '">' + selectCityLang + '</option>';
          if (result.cities && result.cities.length) {
            var _iterator2 = _createForOfIteratorHelper(result.cities),
              _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var city = _step2.value;
                html += '<option value="' + city.id + '" data-center="' + city.geo_center.join(',') + '">' + city.title + '</option>';
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
          citySelection.prop('disabled', false);
          citySelection.html(html);
          $this.removeClass('loadingbar gray').prop('disabled', false);
        }
      });
    }
  });
  $('body').on('change', '.js-city-selection', function () {
    var $this = $(this);
    var defaultVal = typeof selectRegionDefaultVal !== "undefined" ? selectRegionDefaultVal : null;
    var districtSelection = getSelection($this, '.js-district-selection');
    districtSelection.val(defaultVal).prop('disabled', true);
    if ($this.val() && $this.val() !== 'all') {
      var _$this$attr4;
      var mapZoom = (_$this$attr4 = $this.attr('data-map-zoom')) !== null && _$this$attr4 !== void 0 ? _$this$attr4 : 11;
      handleMapCenterAfterSelectChange($this, mapZoom);
      $this.addClass('loadingbar gray').prop('disabled', true);
      $.get('/regions/districtsByCity/' + $this.val(), function (result) {
        if (result && result.code === 200 && result.districts && result.districts.length) {
          districtSelection.closest('.js-districts-field').removeClass('d-none');
          var html = '<option value="' + defaultVal + '">' + selectDistrictLang + '</option>';
          if (result.districts && result.districts.length) {
            var _iterator3 = _createForOfIteratorHelper(result.districts),
              _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var district = _step3.value;
                html += '<option value="' + district.id + '" data-center="' + district.geo_center.join(',') + '">' + district.title + '</option>';
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
          districtSelection.prop('disabled', false);
          districtSelection.html(html);
        } else {
          districtSelection.closest('.js-districts-field').addClass('d-none');
        }
        $this.removeClass('loadingbar gray').prop('disabled', false);
      });
    }
  });
  $('body').on('change', '.js-district-selection', function () {
    var $this = $(this);
    if ($this.val() && $this.val() !== 'all') {
      var _$this$attr5;
      var mapZoom = (_$this$attr5 = $this.attr('data-map-zoom')) !== null && _$this$attr5 !== void 0 ? _$this$attr5 : 14;
      handleMapCenterAfterSelectChange($this, mapZoom);
    }
  });
})(jQuery);
/******/ })()
;